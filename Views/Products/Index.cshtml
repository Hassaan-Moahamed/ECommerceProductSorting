@model List<ECommerceProductSorting.Models.Product>
@{
    Layout = "_Layout";
    ViewData["Title"] = "Products";
}

<h2 class="mb-4">@ViewData["Title"]</h2>

<div class="row mb-4">
    <!-- Filtering Section -->
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Filter Products</h5>
            </div>
            <div class="card-body">
                <form method="get" action="@Url.Action("Index")" class="row g-3">
                    <input type="hidden" name="sortBy" value="@Context.Request.Query["sortBy"]" />
                    <input type="hidden" name="algorithm" value="@Context.Request.Query["algorithm"]" />

                    <!-- Brand Filter -->
                    <div class="col-md-6">
                        <label for="brandFilter" class="form-label">Brand:</label>
                        <select id="brandFilter" name="brandFilter" class="form-select">
                            <option value="">All Brands</option>
                            @foreach (var brand in ViewBag.Brands)
                            {
                                var selected = (brand == ViewBag.BrandFilter) ? "selected" : "";
                                <option value="@brand" selected="@selected">@brand</option>
                            }
                        </select>
                    </div>

                    <!-- Category Filter -->
                    <div class="col-md-6">
                        <label for="categoryFilter" class="form-label">Type:</label>
                        <select id="categoryFilter" name="categoryFilter" class="form-select">
                            <option value="">All Types</option>
                            @foreach (var category in ViewBag.Categories)
                            {
                                var selected = (category == ViewBag.CategoryFilter) ? "selected" : "";
                                <option value="@category" selected="@selected">@category</option>
                            }
                        </select>
                    </div>

                    <div class="col-12">
                        <button type="submit" class="btn btn-primary">Apply Filters</button>
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary">Clear Filters</a>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Sorting Section -->
    <div class="col-md-6">
        <div class="card shadow-sm">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">Sort Products</h5>
            </div>
            <div class="card-body">
                <!-- Algorithm Selection -->
                <div class="mb-3">
                    <h6>Select Algorithm:</h6>
                    <div class="btn-group w-100" role="group">
                        <a class="btn @(Context.Request.Query["algorithm"] == "quick" || string.IsNullOrEmpty(Context.Request.Query["algorithm"]) ? "btn-success" : "btn-outline-success")"
                           href="@Url.Action("Index", new { sortBy = Context.Request.Query["sortBy"], algorithm = "quick", brandFilter = ViewBag.BrandFilter, categoryFilter = ViewBag.CategoryFilter })">QuickSort</a>
                        <a class="btn @(Context.Request.Query["algorithm"] == "merge" ? "btn-success" : "btn-outline-success")"
                           href="@Url.Action("Index", new { sortBy = Context.Request.Query["sortBy"], algorithm = "merge", brandFilter = ViewBag.BrandFilter, categoryFilter = ViewBag.CategoryFilter })">MergeSort</a>
                        <a class="btn @(Context.Request.Query["algorithm"] == "radix" ? "btn-success" : "btn-outline-success")"
                           href="@Url.Action("Index", new { sortBy = Context.Request.Query["sortBy"], algorithm = "radix", brandFilter = ViewBag.BrandFilter, categoryFilter = ViewBag.CategoryFilter })">RadixSort</a>
                        <a class="btn @(Context.Request.Query["algorithm"] == "bucket" ? "btn-success" : "btn-outline-success")"
                           href="@Url.Action("Index", new { sortBy = Context.Request.Query["sortBy"], algorithm = "bucket", brandFilter = ViewBag.BrandFilter, categoryFilter = ViewBag.CategoryFilter })">BucketSort</a>
                    </div>
                </div>

                <!-- Sort By Property -->
                <h6>Sort By Property:</h6>
                <div class="row g-2">
                    <div class="col-md-4">
                        <a class="btn btn-outline-primary w-100 @(Context.Request.Query["sortBy"] == "price" ? "active" : "")"
                           href="@Url.Action("Index", new { sortBy = "price", algorithm = Context.Request.Query["algorithm"], brandFilter = ViewBag.BrandFilter, categoryFilter = ViewBag.CategoryFilter })">Price</a>
                    </div>
                    <div class="col-md-4">
                        <a class="btn btn-outline-primary w-100 @(Context.Request.Query["sortBy"] == "rating" ? "active" : "")"
                           href="@Url.Action("Index", new { sortBy = "rating", algorithm = Context.Request.Query["algorithm"], brandFilter = ViewBag.BrandFilter, categoryFilter = ViewBag.CategoryFilter })">Rating</a>
                    </div>
                    <div class="col-md-4">
                        <a class="btn btn-outline-primary w-100 @(Context.Request.Query["sortBy"] == "name" ? "active" : "")"
                           href="@Url.Action("Index", new { sortBy = "name", algorithm = Context.Request.Query["algorithm"], brandFilter = ViewBag.BrandFilter, categoryFilter = ViewBag.CategoryFilter })">Name</a>
                    </div>
                    <div class="col-md-6">
                        <a class="btn btn-outline-primary w-100 @(Context.Request.Query["sortBy"] == "category" ? "active" : "")"
                           href="@Url.Action("Index", new { sortBy = "category", algorithm = Context.Request.Query["algorithm"], brandFilter = ViewBag.BrandFilter, categoryFilter = ViewBag.CategoryFilter })">Type</a>
                    </div>
                    <div class="col-md-6">
                        <a class="btn btn-outline-primary w-100 @(Context.Request.Query["sortBy"] == "brand" ? "active" : "")"
                           href="@Url.Action("Index", new { sortBy = "brand", algorithm = Context.Request.Query["algorithm"], brandFilter = ViewBag.BrandFilter, categoryFilter = ViewBag.CategoryFilter })">Brand</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Algorithm Information -->
<div class="alert alert-info mb-4">
    <h5>Current Sorting:</h5>
    <p>
        <strong>Algorithm:</strong>
        @{
            var algorithm = Context.Request.Query["algorithm"];
            if (string.IsNullOrEmpty(algorithm) || algorithm == "quick")
            {
                <span>QuickSort</span>
            }
            else if (algorithm == "merge")
            {
                <span>MergeSort</span>
            }
            else if (algorithm == "radix")
            {
                <span>RadixSort (optimized for large datasets)</span>
            }
            else if (algorithm == "bucket")
            {
                <span>BucketSort</span>
            }
        }
    </p>
    <p>
        <strong>Sorting By:</strong>
        @{
            var sortBy = Context.Request.Query["sortBy"];
            if (string.IsNullOrEmpty(sortBy))
            {
                <span>Default (unsorted)</span>
            }
            else
            {
                <span>@sortBy.ToString().First().ToString().ToUpper()@sortBy.ToString().Substring(1)</span>
            }
        }
    </p>
    @if (!string.IsNullOrEmpty(ViewBag.BrandFilter) || !string.IsNullOrEmpty(ViewBag.CategoryFilter))
    {
        <p>
            <strong>Filters Applied:</strong>
            @if (!string.IsNullOrEmpty(ViewBag.BrandFilter))
            {
                <span class="badge bg-primary me-2">Brand: @ViewBag.BrandFilter</span>
            }
            @if (!string.IsNullOrEmpty(ViewBag.CategoryFilter))
            {
                <span class="badge bg-secondary">Type: @ViewBag.CategoryFilter</span>
            }
        </p>
    }
</div>

<!-- Products Table -->
<div class="card shadow">
    <div class="card-header bg-dark text-white">
        <h5 class="mb-0">Product List (@Model.Count items)</h5>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-bordered table-hover align-middle mb-0">
                <thead class="table-dark text-center">
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Rating</th>
                        <th>Type</th>
                        <th>Brand</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Count == 0)
                    {
                        <tr>
                            <td colspan="5" class="text-center py-4">
                                <div class="alert alert-warning mb-0">
                                    No products found matching your criteria.
                                </div>
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var p in Model)
                        {
                            <tr>
                                <td class="text-primary">@p.Name</td>
                                <td class="text-success">@p.Price EGP</td>
                                <td class="text-center text-warning">
                                    <i class="fas fa-star"></i> @p.Rating
                                </td>
                                <td class="text-danger">@p.Category</td>
                                <td class="text-info">@p.Brand</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Algorithm Descriptions -->
<div class="row mt-4">
    <div class="col-md-6 col-lg-3 mb-3">
        <div class="card h-100">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">QuickSort</h5>
            </div>
            <div class="card-body">
                <p>A divide-and-conquer algorithm that works by selecting a 'pivot' element and partitioning the array around the pivot.</p>
                <p><strong>Time Complexity:</strong> O(n log n) average, O(n²) worst case</p>
                <p><strong>Space Complexity:</strong> O(log n)</p>
                <p><strong>Best For:</strong> General purpose sorting</p>
            </div>
        </div>
    </div>
    <div class="col-md-6 col-lg-3 mb-3">
        <div class="card h-100">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">MergeSort</h5>
            </div>
            <div class="card-body">
                <p>A divide-and-conquer algorithm that divides the input array into two halves, recursively sorts them, and then merges the sorted halves.</p>
                <p><strong>Time Complexity:</strong> O(n log n) in all cases</p>
                <p><strong>Space Complexity:</strong> O(n)</p>
                <p><strong>Best For:</strong> Stable sorting with guaranteed performance</p>
            </div>
        </div>
    </div>
    <div class="col-md-6 col-lg-3 mb-3">
        <div class="card h-100">
            <div class="card-header bg-danger text-white">
                <h5 class="mb-0">RadixSort</h5>
            </div>
            <div class="card-body">
                <p>A non-comparative sorting algorithm that sorts data with integer keys by grouping keys by individual digits.</p>
                <p><strong>Time Complexity:</strong> O(nk) where k is the number of digits</p>
                <p><strong>Space Complexity:</strong> O(n+k)</p>
                <p><strong>Best For:</strong> Large datasets with fixed-size keys</p>
            </div>
        </div>
    </div>
    <div class="col-md-6 col-lg-3 mb-3">
        <div class="card h-100">
            <div class="card-header bg-warning text-dark">
                <h5 class="mb-0">BucketSort</h5>
            </div>
            <div class="card-body">
                <p>A distribution sort that distributes elements into buckets, then sorts each bucket individually.</p>
                <p><strong>Time Complexity:</strong> O(n) average, O(n²) worst case</p>
                <p><strong>Space Complexity:</strong> O(n+k) where k is the number of buckets</p>
                <p><strong>Best For:</strong> Uniformly distributed data over a range</p>
            </div>
        </div>
    </div>
</div>
